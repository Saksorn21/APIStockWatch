React Stock Tracking and Personal Portfolio Web Application
Objective: Create a Single Page Application (SPA) using React.js with the following core functionalities:
 * Home Page - Stock Dashboard
   * Stock Search Bar:
     * Positioned at the top of the page.
     * Allows users to search for stocks by Ticker Symbol or Company Name.
     * Upon search, displays a stock price chart for the queried stock.
   * Key Index/Asset Price Box:
     * Displays the current price and price change for key indices/assets:
       * S&P 500
       * Nasdaq
       * BTC/USD (Bitcoin to US Dollar)
       * Gold (XAUUSD)
     * Each item should show its Ticker, Current Price, and Percentage Change.
   * Stock Chart:
     * Presents a price chart for the searched stock.
     * The chart should be easily readable (e.g., Line Chart or Candlestick Chart).
     * The chart data should be real-time or near real-time.
   * Technical Requirements:
     * Utilize a stock data API (e.g., Finnhub.io or Alpha Vantage) for fetching real-time stock prices, index data, crypto data, gold prices, and historical data.
     * Use a charting library like react-chartjs-2 or recharts for rendering graphs.
 * Personal Portfolio Page
   * Portfolio Creation:
     * Allow users to create an investment portfolio (e.g., a simple form or an automatically generated default portfolio).
   * Portfolio Allocation Doughnut Chart:
     * Display the investment allocation of each stock in the portfolio as a Doughnut Chart.
     * This allocation should be based on the "Target Allocation" percentage set by the user for each stock.
   * Add Stock to Portfolio:
     * Include an "Add Stock" button to open a form.
     * The stock addition form should include:
       * Ticker Symbol: (text input)
       * Cost Price: (numerical input, decimal allowed)
       * Number of Shares: (numerical input, decimal allowed for fractional shares)
       * Target Allocation %: (percentage input)
   * Portfolio Stock List:
     * Display details for each added stock in a table or card format:
       * Company Name: (fetched from API)
       * Number of Shares:
       * Profit/Loss USD: (calculated based on current price and cost price)
       * Profit/Loss %:
       * Current Allocation %: (calculated based on the current market value of the stock relative to the total portfolio value)
       * Target Allocation %:
       * "Edit" Button: To modify stock details.
       * "Delete" Button: To remove the stock from the portfolio.
   * Technical Requirements:
     * Use localStorage for persistent client-side storage of user's portfolio data.
     * Current stock prices must be fetched from the API (Finnhub.io or Alpha Vantage).
 * Rebalance Calculator Page
   * Form with Portfolio Stocks:
     * Display a list of all stocks from the "Personal Portfolio."
     * Each item should show: Stock Name, Current Price (fetched automatically from API and editable), Existing Number of Shares, Current Allocation, Target Allocation.
     * Include an input field for "Buy Price" if the user wants to use a different price for calculation.
   * "Calculate" Button:
     * Upon clicking, it should calculate and display the results:
       * Shares to Buy/Sell:
       * New Total Cost:
       * New Total Shares:
       * New Allocation %: (updated from the original allocation based on calculations)
   * Result Box:
     * Summarize: Stock Name, Blended Average Cost, Total Shares After Calculation.
   * "Confirm" and "Cancel" Buttons:
     * Confirm: Update the stock data in localStorage with the new shares and blended average cost.
     * Cancel: Discard the changes.
   * Technical Requirements:
     * Use localStorage for storing and updating data.
General Requirements:
 * Technology: React.js.
 * State Management: Utilize React Context API or useState/useReducer for necessary global state management.
 * Styling: Use CSS Modules, Styled Components, or a UI Framework (e.g., Material-UI/MUI or Chakra UI) for a clean and organized UI.
 * API Key Management: Recommend using .env files for securely storing API Keys.
What the AI should provide:
 * Project structure (Folder Structure).
 * Example code for key components (Home, Portfolio, Rebalance Calculator).
 * Example API integration code (using axios or fetch).
 * Example localStorage usage for saving/loading data.
 * Guidance on installing necessary libraries.